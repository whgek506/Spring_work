package user.dao;

import java.util.List;
import java.util.Map;

import org.apache.commons.collections4.map.HashedMap;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcDaoSupport;
import org.springframework.jdbc.core.support.JdbcDaoSupport;

import lombok.Setter;
import user.bean.UserDTO;

/* 
public class UserDAOImpl implements UserDAO{
	@Setter
	private JdbcTemplate jdbcTemplate;

	@Override
	public void write(UserDTO userDTO) {
		String sql = "insert into usertable values(?,?,?)";
		
		//insert/update/delete 기능을 update이 대신 처리
		jdbcTemplate.update(sql, 
							userDTO.getName(),
							userDTO.getId(),
							userDTO.getPwd());
		
	}

	@Override
	public List<UserDTO> getUserList() {
		String sql = "select * from usertable";
		
		//BeanPropertyRowMapper() : 한줄한줄 SQL 매핑 해줌
		return jdbcTemplate.query(sql,
								  new BeanPropertyRowMapper<UserDTO>(UserDTO.class));
	}
}
*/
//---------------------------------------------------------------------
/* <JdbcDaoSupport: 자식 메소드 사용>
public class UserDAOImpl extends JdbcDaoSupport implements UserDAO {

	@Override
	public void write(UserDTO userDTO) {
		String sql = "insert into usertable values(?,?,?)";
		
		//getJdbcTemplate() -> JdbcDaoSupport의 메소드
		//insert/update/delete 기능을 update이 대신 처리
		getJdbcTemplate().update(sql, 
							userDTO.getName(),
							userDTO.getId(),
							userDTO.getPwd());
		
	}

	@Override
	public List<UserDTO> getUserList() {
		String sql = "select * from usertable";
		
		//BeanPropertyRowMapper() : 한줄한줄 SQL 매핑 해줌
		return getJdbcTemplate().query(sql,
								  new BeanPropertyRowMapper<UserDTO>(UserDTO.class));
	}
	
	
}
*/
//---------------------------------------------------------------------
/* NamedParameterJdbcDaoSupport : ?에 이름 지정 */
public class UserDAOImpl extends NamedParameterJdbcDaoSupport implements UserDAO {
	
	@Override
	public void write(UserDTO userDTO) {
		Map<String, String> map = new HashedMap<String, String>(); 
		map.put("name", userDTO.getName());
		map.put("id", userDTO.getId());
		map.put("pwd", userDTO.getPwd());
		
		//Map으로 값을 지정하면 sql 문장의 ':변수'에 알아서 매핑
		String sql = "insert into usertable values(:name, :id, :pwd)";
		
		//getJdbcTemplate() -> JdbcDaoSupport의 메소드
		//insert/update/delete 기능을 update이 대신 처리
		getNamedParameterJdbcTemplate().update(sql,map);
		
	}

	@Override
	public List<UserDTO> getUserList() {
		String sql = "select * from usertable";
		
		//BeanPropertyRowMapper() : 한줄한줄 SQL 매핑 해줌
		return getJdbcTemplate().query(sql,
								  new BeanPropertyRowMapper<UserDTO>(UserDTO.class));
	}

	@Override
	public void update(UserDTO userDTO) {
		Map<String, String> map = new HashedMap<String, String>(); 
		map.put("name", userDTO.getName());
		map.put("id", userDTO.getId());
		map.put("pwd", userDTO.getPwd());
		
		String sql = "update usertable set name=:name, pwd=:pwd where id=:id";
		getNamedParameterJdbcTemplate().update(sql,map);
	}

	@Override
	public void delete(String id) {
		String sql = "delete from usertable where id= :id";
		 jdbcTemplate.update(sql, id);
	}
	
	
}
